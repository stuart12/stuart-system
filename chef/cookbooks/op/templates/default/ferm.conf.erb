# maintained by Chef
#
# ferm firewall rules
# http://ferm.foo-projects.org

# Chain policies
domain (ip ip6) {
    table filter {
        chain (INPUT FORWARD) policy DROP;
        chain OUTPUT policy ACCEPT;
    }
}

# loopback
domain (ip ip6) table filter {
    chain INPUT interface lo ACCEPT;
    chain OUTPUT outerface lo ACCEPT;
}

# ipv6
domain ip table filter chain (INPUT OUTPUT) protocol ipv6 ACCEPT;

# icmp (kernel does rate-limiting)
domain (ip ip6) table filter chain (INPUT OUTPUT) protocol icmp ACCEPT;

# invalid
domain (ip ip6) table filter chain INPUT mod state state INVALID DROP;

# established/related connections
domain (ip ip6) table filter chain (INPUT OUTPUT) mod state state (ESTABLISHED RELATED) ACCEPT;

<%
@local.sort.each do |protocol, entries|
  entries.transform_keys(&:to_s).sort.each do |port, mask| %>
domain (ip) table filter chain INPUT protocol <%= protocol %> dport (<%= port %>) source <%= @ipaddress %>/<%= mask %> ACCEPT;
<% end %>
<% end %>

<% @multicast.sort.each do |address, what| %>
domain (ip) table filter chain INPUT protocol udp source <%= @ipaddress %>/<%= @prefixlen %> destination 224.0.0.<%= address %> dport <%= what %> ACCEPT;
<% end %>

<% @drop.sort.each do |protocol, ports| %>
domain (ip ip6) table filter chain INPUT protocol <%= protocol %> dport (<%= ports.map(&:to_s).sort.join(' ') %>) DROP;
<% end %>

# multicast DNS IPv6 # https://info.menandmice.com/blog/ipv6-reference-multicast
domain (ip6) table filter chain INPUT protocol udp destination ff02::fb dport 5353 ACCEPT; # FIXME check source

domain (ip) table filter chain INPUT protocol udp dport (bootps) source 0.0.0.0 destination 255.255.255.255 DROP;

domain ip6 table filter chain INPUT proto ipv6-icmp ACCEPT; # allow ICMP (for neighbor solicitation, like ARP for IPv4)

# FORWARD chain REJECT
domain (ip ip6) table filter chain FORWARD REJECT;

# log all other INPUT
domain (ip ip6) table filter chain INPUT {
    mod limit limit 3/min limit-burst 10 LOG log-prefix "INPUT-rejected: " log-level debug;
    REJECT;
}
